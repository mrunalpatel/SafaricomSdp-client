<?php
/**
 * CPRegisterCdp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Safaricom\Sdp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP
 *
 * To Test SDP API's Login with valid Username and Password. Add the Token in the X-Authorization as an key starting the value with Bearer along with Token in authorization     filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Safaricom\Sdp\model;

use \ArrayAccess;
use \Safaricom\Sdp\ObjectSerializer;

/**
 * CPRegisterCdp Class Doc Comment
 *
 * @category Class
 * @package  Safaricom\Sdp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CPRegisterCdp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CPRegister_cdp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sla_file_location' => 'string',
        'revenue_percentage' => 'string',
        'auto_renewal' => 'string',
        'space_allocated' => 'string',
        'content_validity' => 'string',
        'expiration_warning_duration' => 'string',
        'content_types' => 'string[]',
        'interface_type' => 'string[]',
        'ftp_details' => '\Safaricom\Sdp\model\CPRegisterCdpFtpDetails',
        'black_list_check' => 'string',
        'http_user_check' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sla_file_location' => null,
        'revenue_percentage' => null,
        'auto_renewal' => null,
        'space_allocated' => null,
        'content_validity' => null,
        'expiration_warning_duration' => null,
        'content_types' => null,
        'interface_type' => null,
        'ftp_details' => null,
        'black_list_check' => null,
        'http_user_check' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sla_file_location' => 'slaFileLocation',
        'revenue_percentage' => 'revenuePercentage',
        'auto_renewal' => 'autoRenewal',
        'space_allocated' => 'spaceAllocated',
        'content_validity' => 'contentValidity',
        'expiration_warning_duration' => 'expirationWarningDuration',
        'content_types' => 'contentTypes',
        'interface_type' => 'interfaceType',
        'ftp_details' => 'ftpDetails',
        'black_list_check' => 'blackListCheck',
        'http_user_check' => 'httpUserCheck'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sla_file_location' => 'setSlaFileLocation',
        'revenue_percentage' => 'setRevenuePercentage',
        'auto_renewal' => 'setAutoRenewal',
        'space_allocated' => 'setSpaceAllocated',
        'content_validity' => 'setContentValidity',
        'expiration_warning_duration' => 'setExpirationWarningDuration',
        'content_types' => 'setContentTypes',
        'interface_type' => 'setInterfaceType',
        'ftp_details' => 'setFtpDetails',
        'black_list_check' => 'setBlackListCheck',
        'http_user_check' => 'setHttpUserCheck'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sla_file_location' => 'getSlaFileLocation',
        'revenue_percentage' => 'getRevenuePercentage',
        'auto_renewal' => 'getAutoRenewal',
        'space_allocated' => 'getSpaceAllocated',
        'content_validity' => 'getContentValidity',
        'expiration_warning_duration' => 'getExpirationWarningDuration',
        'content_types' => 'getContentTypes',
        'interface_type' => 'getInterfaceType',
        'ftp_details' => 'getFtpDetails',
        'black_list_check' => 'getBlackListCheck',
        'http_user_check' => 'getHttpUserCheck'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sla_file_location'] = isset($data['sla_file_location']) ? $data['sla_file_location'] : null;
        $this->container['revenue_percentage'] = isset($data['revenue_percentage']) ? $data['revenue_percentage'] : null;
        $this->container['auto_renewal'] = isset($data['auto_renewal']) ? $data['auto_renewal'] : null;
        $this->container['space_allocated'] = isset($data['space_allocated']) ? $data['space_allocated'] : null;
        $this->container['content_validity'] = isset($data['content_validity']) ? $data['content_validity'] : null;
        $this->container['expiration_warning_duration'] = isset($data['expiration_warning_duration']) ? $data['expiration_warning_duration'] : null;
        $this->container['content_types'] = isset($data['content_types']) ? $data['content_types'] : null;
        $this->container['interface_type'] = isset($data['interface_type']) ? $data['interface_type'] : null;
        $this->container['ftp_details'] = isset($data['ftp_details']) ? $data['ftp_details'] : null;
        $this->container['black_list_check'] = isset($data['black_list_check']) ? $data['black_list_check'] : null;
        $this->container['http_user_check'] = isset($data['http_user_check']) ? $data['http_user_check'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sla_file_location
     *
     * @return string
     */
    public function getSlaFileLocation()
    {
        return $this->container['sla_file_location'];
    }

    /**
     * Sets sla_file_location
     *
     * @param string $sla_file_location sla_file_location
     *
     * @return $this
     */
    public function setSlaFileLocation($sla_file_location)
    {
        $this->container['sla_file_location'] = $sla_file_location;

        return $this;
    }

    /**
     * Gets revenue_percentage
     *
     * @return string
     */
    public function getRevenuePercentage()
    {
        return $this->container['revenue_percentage'];
    }

    /**
     * Sets revenue_percentage
     *
     * @param string $revenue_percentage revenue_percentage
     *
     * @return $this
     */
    public function setRevenuePercentage($revenue_percentage)
    {
        $this->container['revenue_percentage'] = $revenue_percentage;

        return $this;
    }

    /**
     * Gets auto_renewal
     *
     * @return string
     */
    public function getAutoRenewal()
    {
        return $this->container['auto_renewal'];
    }

    /**
     * Sets auto_renewal
     *
     * @param string $auto_renewal auto_renewal
     *
     * @return $this
     */
    public function setAutoRenewal($auto_renewal)
    {
        $this->container['auto_renewal'] = $auto_renewal;

        return $this;
    }

    /**
     * Gets space_allocated
     *
     * @return string
     */
    public function getSpaceAllocated()
    {
        return $this->container['space_allocated'];
    }

    /**
     * Sets space_allocated
     *
     * @param string $space_allocated space_allocated
     *
     * @return $this
     */
    public function setSpaceAllocated($space_allocated)
    {
        $this->container['space_allocated'] = $space_allocated;

        return $this;
    }

    /**
     * Gets content_validity
     *
     * @return string
     */
    public function getContentValidity()
    {
        return $this->container['content_validity'];
    }

    /**
     * Sets content_validity
     *
     * @param string $content_validity content_validity
     *
     * @return $this
     */
    public function setContentValidity($content_validity)
    {
        $this->container['content_validity'] = $content_validity;

        return $this;
    }

    /**
     * Gets expiration_warning_duration
     *
     * @return string
     */
    public function getExpirationWarningDuration()
    {
        return $this->container['expiration_warning_duration'];
    }

    /**
     * Sets expiration_warning_duration
     *
     * @param string $expiration_warning_duration expiration_warning_duration
     *
     * @return $this
     */
    public function setExpirationWarningDuration($expiration_warning_duration)
    {
        $this->container['expiration_warning_duration'] = $expiration_warning_duration;

        return $this;
    }

    /**
     * Gets content_types
     *
     * @return string[]
     */
    public function getContentTypes()
    {
        return $this->container['content_types'];
    }

    /**
     * Sets content_types
     *
     * @param string[] $content_types content_types
     *
     * @return $this
     */
    public function setContentTypes($content_types)
    {
        $this->container['content_types'] = $content_types;

        return $this;
    }

    /**
     * Gets interface_type
     *
     * @return string[]
     */
    public function getInterfaceType()
    {
        return $this->container['interface_type'];
    }

    /**
     * Sets interface_type
     *
     * @param string[] $interface_type interface_type
     *
     * @return $this
     */
    public function setInterfaceType($interface_type)
    {
        $this->container['interface_type'] = $interface_type;

        return $this;
    }

    /**
     * Gets ftp_details
     *
     * @return \Safaricom\Sdp\model\CPRegisterCdpFtpDetails
     */
    public function getFtpDetails()
    {
        return $this->container['ftp_details'];
    }

    /**
     * Sets ftp_details
     *
     * @param \Safaricom\Sdp\model\CPRegisterCdpFtpDetails $ftp_details ftp_details
     *
     * @return $this
     */
    public function setFtpDetails($ftp_details)
    {
        $this->container['ftp_details'] = $ftp_details;

        return $this;
    }

    /**
     * Gets black_list_check
     *
     * @return string
     */
    public function getBlackListCheck()
    {
        return $this->container['black_list_check'];
    }

    /**
     * Sets black_list_check
     *
     * @param string $black_list_check black_list_check
     *
     * @return $this
     */
    public function setBlackListCheck($black_list_check)
    {
        $this->container['black_list_check'] = $black_list_check;

        return $this;
    }

    /**
     * Gets http_user_check
     *
     * @return string
     */
    public function getHttpUserCheck()
    {
        return $this->container['http_user_check'];
    }

    /**
     * Sets http_user_check
     *
     * @param string $http_user_check http_user_check
     *
     * @return $this
     */
    public function setHttpUserCheck($http_user_check)
    {
        $this->container['http_user_check'] = $http_user_check;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


