<?php
/**
 * DeliveryReceipt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Safaricom\Sdp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP
 *
 * To Test SDP API's Login with valid Username and Password. Add the Token in the X-Authorization as an key starting the value with Bearer along with Token in authorization     filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Safaricom\Sdp\model;

use \ArrayAccess;
use \Safaricom\Sdp\ObjectSerializer;

/**
 * DeliveryReceipt Class Doc Comment
 *
 * @category Class
 * @package  Safaricom\Sdp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryReceipt implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryReceipt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request_id' => 'int',
        'request_time_stamp' => 'string',
        'channel' => 'string',
        'source_address' => 'string',
        'operation' => 'string',
        'username' => 'string',
        'password' => 'string',
        'trace_id' => 'string',
        'type_of_delivery' => 'string',
        'request_param' => '\Safaricom\Sdp\model\DeliveryReceiptRequestParam'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request_id' => 'int32',
        'request_time_stamp' => null,
        'channel' => null,
        'source_address' => null,
        'operation' => null,
        'username' => null,
        'password' => null,
        'trace_id' => null,
        'type_of_delivery' => null,
        'request_param' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'requestId',
        'request_time_stamp' => 'requestTimeStamp',
        'channel' => 'channel',
        'source_address' => 'sourceAddress',
        'operation' => 'operation',
        'username' => 'username',
        'password' => 'password',
        'trace_id' => 'traceID',
        'type_of_delivery' => 'typeOfDelivery',
        'request_param' => 'requestParam'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
        'request_time_stamp' => 'setRequestTimeStamp',
        'channel' => 'setChannel',
        'source_address' => 'setSourceAddress',
        'operation' => 'setOperation',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'trace_id' => 'setTraceId',
        'type_of_delivery' => 'setTypeOfDelivery',
        'request_param' => 'setRequestParam'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
        'request_time_stamp' => 'getRequestTimeStamp',
        'channel' => 'getChannel',
        'source_address' => 'getSourceAddress',
        'operation' => 'getOperation',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'trace_id' => 'getTraceId',
        'type_of_delivery' => 'getTypeOfDelivery',
        'request_param' => 'getRequestParam'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['request_time_stamp'] = isset($data['request_time_stamp']) ? $data['request_time_stamp'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['source_address'] = isset($data['source_address']) ? $data['source_address'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['trace_id'] = isset($data['trace_id']) ? $data['trace_id'] : null;
        $this->container['type_of_delivery'] = isset($data['type_of_delivery']) ? $data['type_of_delivery'] : null;
        $this->container['request_param'] = isset($data['request_param']) ? $data['request_param'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return int
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param int $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets request_time_stamp
     *
     * @return string
     */
    public function getRequestTimeStamp()
    {
        return $this->container['request_time_stamp'];
    }

    /**
     * Sets request_time_stamp
     *
     * @param string $request_time_stamp request_time_stamp
     *
     * @return $this
     */
    public function setRequestTimeStamp($request_time_stamp)
    {
        $this->container['request_time_stamp'] = $request_time_stamp;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets source_address
     *
     * @return string
     */
    public function getSourceAddress()
    {
        return $this->container['source_address'];
    }

    /**
     * Sets source_address
     *
     * @param string $source_address source_address
     *
     * @return $this
     */
    public function setSourceAddress($source_address)
    {
        $this->container['source_address'] = $source_address;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return string
     */
    public function getTraceId()
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param string $trace_id trace_id
     *
     * @return $this
     */
    public function setTraceId($trace_id)
    {
        $this->container['trace_id'] = $trace_id;

        return $this;
    }

    /**
     * Gets type_of_delivery
     *
     * @return string
     */
    public function getTypeOfDelivery()
    {
        return $this->container['type_of_delivery'];
    }

    /**
     * Sets type_of_delivery
     *
     * @param string $type_of_delivery type_of_delivery
     *
     * @return $this
     */
    public function setTypeOfDelivery($type_of_delivery)
    {
        $this->container['type_of_delivery'] = $type_of_delivery;

        return $this;
    }

    /**
     * Gets request_param
     *
     * @return \Safaricom\Sdp\model\DeliveryReceiptRequestParam
     */
    public function getRequestParam()
    {
        return $this->container['request_param'];
    }

    /**
     * Sets request_param
     *
     * @param \Safaricom\Sdp\model\DeliveryReceiptRequestParam $request_param request_param
     *
     * @return $this
     */
    public function setRequestParam($request_param)
    {
        $this->container['request_param'] = $request_param;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


